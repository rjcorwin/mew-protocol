# Coder Agent Space - Coding assistant with file system access
space:
  id: "{{SPACE_NAME}}"
  name: "{{SPACE_NAME}}"
  description: "Coding assistant that requires human approval for file modifications"
  default_participant: human
  # transport:
  #   default: stdio
  #   overrides:
  #     remote-tester: websocket

gateway:
  # websocket:
  #   listen: 0.0.0.0:4700

participants:
  # Human participant with full capabilities (can approve proposals)
  human:
    # No tokens field - generated at runtime in .mew/tokens/
    capabilities:
      - kind: "*"  # Full capabilities including proposal approval

  # Coder agent with limited capabilities - creates proposals for file modifications
  mew:
    type: local
    command: "node"
    args: ["../../sdk/typescript-sdk/agent/dist/index.js"]
    auto_start: true
    env:
      MEW_TRANSPORT: "stdio"
      MEW_SPACE: "{{SPACE_NAME}}"
      MEW_TOKEN: "${TOKEN}"
      MEW_PARTICIPANT_ID: "mew"
    # No tokens field - generated at runtime in .mew/tokens/
    capabilities:
      - kind: "chat"
      - kind: "reasoning/*"
      - kind: "mcp/proposal"
      - kind: "mcp/response"
      - kind: "mcp/request"
        payload:
          method: "!tools/call"
      # Allow agent to discover tools from other participants
      - kind: "mcp/request"
        payload:
          method: "tools/list"
      # Uncomment for YOLO mode - gives agent direct tools/call capability:
      # - kind: "mcp/request"
      #   payload:
      #     method: "tools/call"
      # Allow direct calls to read-only operations without approval
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "list_allowed_directories"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "read_file"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "read_text_file"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "read_media_file"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "read_multiple_files"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "search_files"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "list_directory"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "list_directory_with_sizes"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "directory_tree"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "get_file_info"

  mcp-fs-bridge:
    type: local
    command: "node"
    args:
      [
        "../../bridge/dist/mcp-bridge.js",
        "--transport",
        "stdio",
        "--space",
        "{{SPACE_NAME}}",
        "--token",
        "${TOKEN}",
        "--participant-id",
        "mcp-fs-bridge",
        "--mcp-command",
        "node",
        "--mcp-args",
        ".mew/node_modules/@modelcontextprotocol/server-filesystem/dist/index.js,./",
        "--mcp-cwd",
        "./"
      ]
    auto_start: true
    capabilities:
      - kind: "mcp/request"
      - kind: "mcp/response"
      - kind: "mcp/notification"

defaults:
  capabilities:
    - kind: "chat"  # Everyone can chat by default
