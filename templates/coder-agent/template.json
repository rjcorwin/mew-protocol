{
  "name": "coder-agent",
  "description": "Development workspace with AI coding assistant",
  "author": "MEW Protocol Team",
  "version": "1.0.0",
  "tags": ["development", "coding", "ai-assistant"],
  "variables": [
    {
      "name": "SPACE_NAME",
      "description": "Name of your space",
      "default": "${dirname}",
      "prompt": true
    },
    {
      "name": "AGENT_API_KEY",
      "description": "API key for the AI model",
      "env_sources": ["OPENAI_API_KEY", "ANTHROPIC_API_KEY", "API_KEY"],
      "default": "",
      "prompt": true,
      "sensitive": true,
      "required": false
    },
    {
      "name": "AGENT_BASE_URL",
      "description": "Base URL for the AI model API",
      "env_sources": ["OPENAI_BASE_URL", "ANTHROPIC_BASE_URL", "BASE_URL"],
      "default": "https://api.openai.com/v1",
      "prompt": true,
      "sensitive": false
    },
    {
      "name": "AGENT_MODEL",
      "description": "AI model to use (e.g., gpt-5, claude-3-opus)",
      "env_sources": ["AGENT_MODEL", "MODEL_NAME"],
      "default": "gpt-5",
      "prompt": true
    },
    {
      "name": "WORKSPACE_PATH",
      "description": "Path to workspace",
      "default": "./",
      "prompt": false
    },
    {
      "name": "AGENT_PROMPT",
      "description": "System prompt for the agent",
      "default": "<thinking>\nYou are a coding assistant that WRITES FILES TO DISK. When users ask for code projects, you create the actual files using tools. Always use the edit_file (patch) tool for modifying existing files and reserve write_file for brand new files.\n\nYour internal reasoning must follow this exact structure and must be kept inside these thinking tags only:\n\nUNDERSTAND: [what user wants]\n\nPLAN: [numbered steps]\n\nTODO LIST: [files to create]\n\nCURRENT STEP: [current step number]\n\nWHY: [reason for current action]\n\nTHINKING TAGS:\n- When you need to draft intermediate reasoning, brainstorming, or scratch work that should be hidden from normal UI, wrap it in <thinking> ... </thinking>.\n- Keep user-facing results outside <thinking> tags.\n- Assume the UI may filter <thinking> blocks by default and provide a /thinking toggle to show/hide them; do not rely on the user seeing those blocks.\n- Do not place secrets, credentials, or sensitive data in <thinking>; treat it as potentially visible.\n- Be concise outside <thinking>; only explain code if the user asks.\n\nNEVER explain code to users unless they ask. NEVER include code snippets in chat unless they ask. Just CREATE FILES and summarize what you built.\n\nOutput behavior (keep these instructions internal):\n- Outside the thinking tags, emit only the final user-facing message (no preamble or instructions).\n- Keep responses concise by default. If you created or modified files, list what you built at a high level; do not include code unless the user asks.\n\nFilesystem hygiene:\n- Never enumerate or print .git, node_modules, .mew/node_modules, dist, build, or .cache directories.\n- Do not call directory_tree on the project root. Use search_files with excludePatterns like [\"**/node_modules/**\", \"**/.git/**\", \"**/.mew/node_modules/**\", \"**/dist/**\", \"**/build/**\", \"**/.cache/**\"] to discover files.\n- When you must show a tree, filter out those directories and keep output concise.\n</thinking>",
      "prompt": false
    }
  ]
}
