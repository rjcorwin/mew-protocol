# Coder Agent Demo Space - With Approval Required for File Modifications
space:
  id: coder-demo
  name: "Coder Agent Demo"
  description: "Coding assistant that requires human approval for file modifications"
  default_participant: human

participants:
  # Human participant with full capabilities (can approve proposals)
  human:
    tokens: 
      - human-token
    capabilities:
      - kind: "*"  # Full capabilities including proposal approval
      
  # Coder agent with limited capabilities - creates proposals for file modifications
  coder-agent:
    type: local
    command: "node"
    args: ["../../sdk/typescript-sdk/agent/dist/index.js", "--gateway", "ws://localhost:${PORT}", "--space", "coder-demo", "--token", "coder-token", "--id", "coder-agent"]
    auto_start: true
    tokens:
      - coder-token
    capabilities:
      - kind: "chat"
      - kind: "reasoning/*"
      - kind: "mcp/proposal"
      - kind: "mcp/response"
      - kind: "mcp/request"
        payload:
          method: "!tools/call"
      # Allow direct calls to read-only operations without approval
      # These are safe operations that don't modify the filesystem:
      # - list_allowed_directories: Check where files can be written
      # - read_file: Read existing files (deprecated)
      # - read_text_file: Read text files (modern replacement for read_file)
      # - read_media_file: Read image/audio files as base64
      # - read_multiple_files: Read multiple files efficiently
      # - search_files: Search for files by pattern
      # - list_directory: List contents of directories
      # - list_directory_with_sizes: List directory with file sizes
      # - directory_tree: Get recursive tree view
      # - get_file_info: Get metadata about files
      # Write operations (write_file, edit_file, create_directory, move_file) still require approval
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "list_allowed_directories"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "read_file"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "read_text_file"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "read_media_file"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "read_multiple_files"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "search_files"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "list_directory"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "list_directory_with_sizes"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "directory_tree"
      - kind: "mcp/request"
        payload:
          method: "tools/call"
          params:
            name: "get_file_info"
    env:
      # OPENAI_API_KEY is inherited from environment automatically
      OPENAI_MODEL: "gpt-5"
      # OPENAI_BASE_URL: "..."
      # Configure the agent with 100 max iterations for complex multi-step tasks
      # and 1 hour timeout for proposals to allow human review time
      # and 50 message conversation history for context across interactions
      MEW_AGENT_CONFIG: '{"maxIterations": 100, "requestTimeout": 3600000, "conversationHistoryLength": 50, "reasoningEnabled": true, "systemPrompt": "You are an expert software developer assistant. Your primary job is to CREATE and MODIFY files on the filesystem based on user requests. Focus on implementation, not explanation.\\n\\nINTERNAL REASONING (for reasoning/thought messages):\\n1. UNDERSTAND: What is the user asking for exactly?\\n2. PLAN: Break down the task into specific, numbered steps\\n3. TODO LIST: List all files/components that need to be created or modified\\n4. CURRENT STEP: Clearly state what step you are working on\\n5. WHY: Explain why this specific action is necessary\\n\\nFINAL RESPONSES (for chat messages to users):\\n- Be conversational and natural\\n- Focus on what you ACCOMPLISHED (files created/modified)\\n- Mention file paths and key functionality\\n- Do NOT include code snippets or explanations unless specifically asked\\n- Assume the user wants files written to disk, not code explained\\n- Ask if they need anything else\\n- Avoid using the structured UNDERSTAND/PLAN format in your final response"}'
  
  # MCP Bridge for file system access - executes approved proposals
  mcp-fs-bridge:
    type: local
    command: "node"
    args: ["../../bridge/bin/mew-bridge.js", "--gateway", "ws://localhost:${PORT}", "--space", "coder-demo", "--token", "mcp-bridge-token", "--participant-id", "mcp-fs-bridge", "--mcp-command", "npx", "--mcp-args", "@modelcontextprotocol/server-filesystem,.", "--mcp-cwd", "./workspace"]
    auto_start: true
    tokens:
      - mcp-bridge-token
    capabilities:
      - kind: "mcp/request"
      - kind: "mcp/response"
      - kind: "mcp/notification"

  # Auto-fulfiller for proposals (for demonstration/testing)
  auto-fulfiller:
    type: local
    command: "node"
    args: ["./auto-fulfiller.js", "--gateway", "ws://localhost:${PORT}", "--space", "coder-demo", "--token", "fulfiller-token", "--participant-id", "auto-fulfiller"]
    auto_start: false  # Disabled for manual testing
    tokens:
      - fulfiller-token
    capabilities:
      - kind: "mcp/proposal"  # Can see proposals
      - kind: "mcp/request"   # Can execute approved operations
      - kind: "mcp/response"  # Can respond to requests
      - kind: "chat"

defaults:
  capabilities:
    - kind: "chat"  # Everyone can chat by default
